./tools/getReceipt/options.cpp:    COption("~!trans_list",    "a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)"),
./tools/getReceipt/options.cpp:    COption("-articulate",     "articulate the transactions if an ABI is found for the 'to' address"),
./tools/getReceipt/options.cpp:    COption("-logs",           "display the receipt's logs"),
./tools/getReceipt/options.cpp:    COption("@fmt:<fmt>",      "export format (one of [none|json|txt|csv|api])"),
./tools/getReceipt/options.cpp:    COption("",                "Retrieve a transaction's receipt from the local cache or a running node."),
./tools/getBlock/options.cpp:    COption("~block_list",         "a space-separated list of one or more blocks to retrieve"),
./tools/getBlock/options.cpp:    COption("-hash_o(n)ly",        "display only transaction hashes, default is to display full transaction detail"),
./tools/getBlock/options.cpp:    COption("-check",              "compare results between qblocks and Ethereum node, report differences, if any"),
./tools/getBlock/options.cpp:    COption("-addrs",              "display all addresses included in the block"),
./tools/getBlock/options.cpp:    COption("-uniq",               "display only uniq addresses found per block"),
./tools/getBlock/options.cpp:    COption("-uni(q)Tx",           "display only uniq addresses found per transaction"),
./tools/getBlock/options.cpp:    COption("-nu(m)ber",           "display address counts (alterntively --addrCnt, --uniqTxCnt, or --uniqCnt)"),
./tools/getBlock/options.cpp:    COption("-fi(l)ter:<addr>",    "useful only for --addrs or --uniq, only display this address in results"),
./tools/getBlock/options.cpp:    COption("@latest",             "display the latest blocks at both the node and the cache"),
./tools/getBlock/options.cpp:    COption("@f(o)rce",            "force a re-write of the block to the cache"),
./tools/getBlock/options.cpp:    COption("@quiet",              "do not print results to screen, used for speed testing and data checking"),
./tools/getBlock/options.cpp:    COption("@source:[c|r]",       "either :c(a)che or :(r)aw, source for data retrival. (shortcuts -c = qblocks, -r = node)"),
./tools/getBlock/options.cpp:    COption("@fields:[a|m|c|r]",   "either :(a)ll, (m)ini, (c)ache or :(r)aw; which fields to include in output (all is default)"),
./tools/getBlock/options.cpp:    COption("@normalize",          "normalize (remove un-common fields and sort) for comparison with other results (testing)"),
./tools/getBlock/options.cpp:    COption("",                    "Returns block(s) from local cache or directly from a running node.\n"),
./tools/getTrans/options.cpp:    COption("~!trans_list",    "a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)"),
./tools/getTrans/options.cpp:    COption("-articulate",     "articulate the transactions if an ABI is found for the 'to' address"),
./tools/getTrans/options.cpp:    COption("-trace",          "display the transaction's trace"),
./tools/getTrans/options.cpp:    COption("@fmt:<fmt>",      "export format (one of [none|json|txt|csv|api])"),
./tools/getTrans/options.cpp:    COption("",                "Retrieve an Ethereum transaction from the local cache or a running node."),
./tools/getTrans/handle_belongs.cpp:    COption("@belongs:<addr>", "report true or false if the given address is found anywhere in the transaction"),
./tools/getTrans/handle_belongs.cpp:    COption("@asStrs",         "when checking --belongs, treat input and log data as a string"),
./tools/getState/options.cpp:    COption("~address_list", "one or more addresses (0x...) from which to retrieve balances"),
./tools/getState/options.cpp:    COption("~!block_list",  "an optional list of one or more blocks at which to report balances, defaults to 'latest'"),
./tools/getState/options.cpp:    COption("-mode:<val>",   "control which state to export. One of [none|some|all|balance|nonce|code|storage|deployed|accttype]"),
./tools/getState/options.cpp:    COption("-nozero",       "suppress the display of zero balance accounts"),
./tools/getState/options.cpp:    COption("-changes",      "only report a balance when it changes from one block to the next"),
./tools/getState/options.cpp:    COption("@n(o)Header",   "hide the header in txt and csv mode"),
./tools/getState/options.cpp:    COption("@fmt:<fmt>",    "export format (one of [none|json|txt|csv|api])"),
./tools/getState/options.cpp:    COption("",              "Retrieve the balance (in wei) for one or more addresses at the given block(s).\n"),
./tools/getBloom/options.cpp:    COption("~block_list",  "a space-separated list of one or more blocks for which to retrieve blooms"),
./tools/getBloom/options.cpp:    COption("-eab",         "pull the enhanced adaptive blooms from QBlocks cache"),
./tools/getBloom/options.cpp:    COption("-block",       "show only the block-level bloom (--raw only)"),
./tools/getBloom/options.cpp:    COption("-re(c)eipts",  "show only the receipt-level blooms (--raw only)"),
./tools/getBloom/options.cpp:    COption("-b(i)ts",      "display blooms as bits instead of hex"),
./tools/getBloom/options.cpp:    COption("-b(a)rs",      "display blooms as bar chart instead of hex"),
./tools/getBloom/options.cpp:    COption("-bitbar(s)",   "display nBits as a bar chart"),
./tools/getBloom/options.cpp:    COption("-pctbars",     "display nBits as a percentage of bloom space"),
./tools/getBloom/options.cpp:    COption("-bitcou(n)t",  "display the number of bits lit per bloom"),
./tools/getBloom/options.cpp:    COption("@force",       "force a re-write of the bloom to the cache"),
./tools/getBloom/options.cpp:    COption("",             "Returns bloom filter(s) from running node (the default) or as EAB from QBlocks.\n"),
./tools/whereBlock/options.cpp:    COption("~block_list", "a space-separated list of one or more blocks to search for"),
./tools/whereBlock/options.cpp:    COption("@fmt:<fmt>",  "export format (one of [none|json|txt|csv|api])"),
./tools/whereBlock/options.cpp:    COption("",            "Reports if a block was found in the cache, at a local, or at a remote node.\n"),
./tools/getTokenInfo/options.cpp:    COption("~address_list", "two or more addresses (0x...), the first is an ERC20 token, balances for the rest are reported"),
./tools/getTokenInfo/options.cpp:    COption("~!block_list",  "an optional list of one or more blocks at which to report balances, defaults to 'latest'"),
./tools/getTokenInfo/options.cpp:    COption("-byAcct",       "consider each address an ERC20 token except the last, whose balance is reported for each token"),
./tools/getTokenInfo/options.cpp:    COption("-nozero",       "suppress the display of zero balance accounts"),
./tools/getTokenInfo/options.cpp:    COption("@info:<val>",   "retreive information [name|decimals|totalSupply|version|symbol|all] about the token"),
./tools/getTokenInfo/options.cpp:    COption("",              "Retrieve the token balance(s) for one or more addresses at the given (or latest) block(s).\n"),
./tools/getTrace/options.cpp:    COption("~!trans_list",    "a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)"),
./tools/getTrace/options.cpp:    COption("-articulate",     "articulate the transactions if an ABI is found for the 'to' address"),
./tools/getTrace/options.cpp:    COption("-countOnly",      "show the number of traces for the transaction only (fast)"),
./tools/getTrace/options.cpp:    COption("-noHeader",       "do not show the header row"),
./tools/getTrace/options.cpp:    COption("@fmt:<fmt>",      "export format (one of [none|json|txt|csv|api])"),
./tools/getTrace/options.cpp:    COption("",                "Retrieve a transaction's traces from the local cache or a running node."),
./tools/ethslurp/options.cpp:    COption("~addrs",           "one or more addresses to slurp"),
./tools/ethslurp/options.cpp:    COption("-blocks:<range>",   "an optional range of blocks to slurp"),
./tools/ethslurp/options.cpp:    COption("-type:<tx_type>",  "extract either [ ext | int | token | miner | all ] type of transactions"),
./tools/ethslurp/options.cpp:    COption("-fmt:<str>",       "pretty print, optionally add ':txt,' ':csv,' or ':html'"),
./tools/ethslurp/options.cpp:    COption("-blocks:<range>",  "export records in block range (:0[:max])"),
./tools/ethslurp/options.cpp:    COption("-silent",          "Run silently (only freshen the data, do not display it)"),
./tools/ethslurp/options.cpp:    COption("",                 "Fetches data from EtherScan for an arbitrary address. Formats the output to your specification.\n"),
./tools/whenBlock/options.cpp:    COption("~!block",    "one or more block numbers (or a 'special' block), or..."),
./tools/whenBlock/options.cpp:    COption("~!date",     "one or more dates formatted as YYYY-MM-DD[THH[:MM[:SS]]]"),
./tools/whenBlock/options.cpp:    COption("-list",      "export all the named blocks"),
./tools/whenBlock/options.cpp:    COption("@fmt:<fmt>", "export format (one of [none|json|txt|csv|api])"),
./tools/whenBlock/options.cpp:    COption("",           "Finds the nearest block prior to a date, or the nearest date prior to a block.\n Alternatively, search for one of special 'named' blocks.\n"),
./tools/ethQuote/options.cpp:    COption("-at:<timestamp>",                 "Report the price since nearest five minutes to the given timestamp"),
./tools/ethQuote/options.cpp:    COption("-current",                        "Report on the current price (i.e. -at:now)"),
./tools/ethQuote/options.cpp:    COption("-data",                           "Export prices as JSON data"),
./tools/ethQuote/options.cpp:    COption("-freshen",                        "Freshen database (append new data)"),
./tools/ethQuote/options.cpp:    COption("-period:<5|15|30|*120|240|1440>", "Display prices in this increment. One of [5|15|30|120*|240|1440]"),
./tools/ethQuote/options.cpp:    COption("-pair:<val>",                     "Which price pair to freshen or list (see Poloniex)"),
./tools/ethQuote/options.cpp:    COption("",                                "Freshen and/or display Ethereum price data and other purposes.\n"),
./tools/grabABI/options.cpp:    COption("~addr",       "the address(es) of the smart contract(s) to grab"),
./tools/grabABI/options.cpp:    COption("-canonical",  "convert all types to their canonical represenation and remove all spaces from display"),
./tools/grabABI/options.cpp:    COption("-generate",   "generate C++ code into the current folder for all functions and events found in the ABI"),
./tools/grabABI/options.cpp:    COption("-data",       "export the display as data"),
./tools/grabABI/options.cpp:    COption("-encode",     "generate the encodings for the functions / events in the ABI"),
./tools/grabABI/options.cpp:    COption("-json",       "print the ABI to the screen as json"),
./tools/grabABI/options.cpp:    COption("-noconst",    "generate encodings for non-constant functions and events only (always true when generating)"), // NOLINT
./tools/grabABI/options.cpp:    COption("-open",       "open the ABI file for editing, download if not already present"),
./tools/grabABI/options.cpp:    COption("-so(l):<fn>", "create the ABI file from a .sol file in the local directory"),
./tools/grabABI/options.cpp:    COption("@silent",     "if ABI cannot be acquired, fail silently (useful for scripting)"),
./tools/grabABI/options.cpp:    COption("@nodec",      "do not decorate duplicate names"),
./tools/grabABI/options.cpp:    COption("@known",      "load common 'known' ABIs from cache"),
./tools/grabABI/options.cpp:    COption("",            "Fetches the ABI for a smart contract. Optionally generates C++ source code representing that ABI.\n"),
./tools/grabABI/templates/options.cpp:    COption("-parse",        "display parsed input data"),
./tools/grabABI/templates/options.cpp:    COption("-lo(g)s",       "display smart contract lo(g)s or events"),
./tools/grabABI/templates/options.cpp:    COption("-trace",        "display smart contract internal traces"),
./tools/grabABI/templates/options.cpp:    COption("-accounting",   "display credits and debits per account and reconcile at each block"),
./tools/grabABI/templates/options.cpp:    COption("-no_check",     "do not do balance check at each block"),
./tools/grabABI/templates/options.cpp:    COption("-debug",        "enter debug mode (pause after each transaction)"),
./tools/grabABI/templates/options.cpp:    COption("-single",       "if debugging is enable, single step through transactions"),
./tools/grabABI/templates/options.cpp:    COption("-export",       "export the transactions to export file"),
./tools/grabABI/templates/options.cpp:    COption("-json",         "ignore export format and export as json"),
./tools/grabABI/templates/options.cpp:    COption("-bals",         "if a balance does not reconcile, export a message to a file"),
./tools/grabABI/templates/options.cpp:    COption("-list",         "display list of monitored accounts"),
./tools/grabABI/templates/options.cpp:    COption("-kBlock:<num>", "start processing at block :k"),
./tools/grabABI/templates/options.cpp:    COption("-offset:<num>", "offset to kBlock"),
./tools/grabABI/templates/options.cpp:    COption("",              "Index transactions for a given Ethereum address (or series of addresses).\r\n"),
./tools/grabABI/templates/debug.cpp:    COption("-(c)orrect",     "Correct the current imbalance and continue to the next imbalance"),
./tools/grabABI/templates/debug.cpp:    COption("-(a)utocorrect", "Turn on or off autocorrect (allows pressing enter to correct)"),
./tools/grabABI/templates/debug.cpp:    COption("-(e)thscan",     "Open a block, account, or transaction in http://ethscan.io"),
./tools/grabABI/templates/debug.cpp:    COption("-(s)ource",      "View the smart contract's source code (if found)"),
./tools/grabABI/templates/debug.cpp:    COption("-(b)uffer",      "Show the transaction buffer (including transaction hashes)"),
./tools/grabABI/templates/debug.cpp:    COption("-(l)ist",        "Show the list of accounts being debugged"),
./tools/grabABI/templates/debug.cpp:    COption("-confi(g)",      "Edit the config file"),
./tools/grabABI/templates/debug.cpp:    COption("-si(n)gle",      "Toggle single step"),
./tools/grabABI/templates/debug.cpp:    COption("-(t)race",       "Toggle display of trace"),
./tools/grabABI/templates/debug.cpp:    COption("-(d)ollars",     "Display US dollars as well"),
./tools/grabABI/templates/debug.cpp:    COption("-!cmd",          "Run a system command"),
./tools/grabABI/templates/debug.cpp:    COption("-(q)uit",        "Quit the current monitor program"),
./tools/grabABI/templates/debug.cpp:    COption("-(h)elp",        "Display this screen"),
./tools/grabABI/templates/debug.cpp:    COption("",               "Press enter to continue without correction, up or down arrows to recall commands"),
./tools/getAccounts/options.cpp:    COption("~terms",       "a space separated list of one or more search terms"),
./tools/getAccounts/options.cpp:    COption("-expand",      "expand search to include all fields (default searches name, address, and symbol only)"),
./tools/getAccounts/options.cpp:    COption("-matchCase",   "do case-sensitive search"),
./tools/getAccounts/options.cpp:    COption("-owned",       "Include personal accounts in the search"),
./tools/getAccounts/options.cpp:    COption("-custom",      "Include your custom named accounts"),
./tools/getAccounts/options.cpp:    COption("-prefund",     "Include prefund accounts"),
./tools/getAccounts/options.cpp:    COption("-named",       "Include well know token and airdrop addresses in the search"),
./tools/getAccounts/options.cpp:    COption("-addr",        "display only addresses in the results (useful for scripting)"),
./tools/getAccounts/options.cpp:    COption("@fmt:<fmt>",   "export format (one of [none|json|txt|csv|api])"),
./tools/getAccounts/options.cpp:    COption("@o(t)her",     "export other addresses if found"),
./tools/getAccounts/options.cpp:    COption("",             "Query addresses and/or names well known accounts.\n"),
./tools/getLogs/options.cpp:    COption("~!trans_list",    "a space-separated list of one or more transaction identifiers (tx_hash, bn.txID, blk_hash.txID)"),
./tools/getLogs/options.cpp:    COption("-articulate",     "articulate the transactions if an ABI is found for the 'to' address"),
./tools/getLogs/options.cpp:    COption("@fmt:<fmt>",      "export format (one of [none|json|txt|csv|api])"),
./tools/getLogs/options.cpp:    COption("",                "Retrieve a transaction's logs from the local cache or a running node."),
./other/single/options.cpp:    COption("-option1", "option one"),
./other/single/options.cpp:    COption("-thing",   "option two"),
./other/single/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/blockCheck/options.cpp:    COption("~mode", "one of 'raw', 'qblocks', 'update', 'new'"),
./other_backup/blockCheck/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/reader/options.cpp:    COption("fileName", "file"),
./other_backup/reader/options.cpp:    COption("-sort",    "sort em"),
./other_backup/reader/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/traceCheck/options.cpp:    COption("~block_list", "a space-separated list of one or more blocks to retrieve"),
./other_backup/traceCheck/options.cpp:    COption("",            "Visit all traces in the given blocks and do stuff (change the code to change the stuff).\n"),
./other_backup/allABIs/options.cpp:    COption("-option1", "option one"),
./other_backup/allABIs/options.cpp:    COption("-thing",   "option two"),
./other_backup/allABIs/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/traceCounter/options.cpp:    COption("-firstBlock:<num>", "the first block to visit (block zero by default)"),
./other_backup/traceCounter/options.cpp:    COption("-lastBlock:<num>",  "the last block to visit (to end of chain by default)"),
./other_backup/traceCounter/options.cpp:    COption("-report",           "report on the statistics without updating"),
./other_backup/traceCounter/options.cpp:    COption("",                  "Scan the m iniBlock database for trace counts.\n"),
./other_backup/nameFix/options.cpp:    COption("-option1", "option one"),
./other_backup/nameFix/options.cpp:    COption("-thing",   "option two"),
./other_backup/nameFix/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/acctExport_previous/options.cpp:    COption("~address_list",    "one or more addresses (0x...) to export"),
./other_backup/acctExport_previous/options.cpp:    COption("-fmt:<fmt>",       "export format (one of [json|txt|csv])"),
./other_backup/acctExport_previous/options.cpp:    COption("-fi(l)ter:<addr>", "show results for this address (you may specify more than one filter)"),
./other_backup/acctExport_previous/options.cpp:    COption("-u seBlooms",       "use bloom filters to decide whether or not to re-check the cache"),
./other_backup/acctExport_previous/options.cpp:    COption("-ignoreDdos",      "ignore apparent dDos transactions."),
./other_backup/acctExport_previous/options.cpp:    COption("",                 "Export transactions for one or more Ethereum addresses.\n"),
./other_backup/speedTest/options.cpp:    COption("-startBlock", "block number of where to start the test"),
./other_backup/speedTest/options.cpp:    COption("-thing",   "option two"),
./other_backup/speedTest/options.cpp:    COption("",         "Performs various speed tests againt Infrua, Parity, and QBlocks.\n"),
./other_backup/curses/options.cpp:    COption("-option1", "option one"),
./other_backup/curses/options.cpp:    COption("-thing",   "option two"),
./other_backup/curses/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/gasHole/options.cpp:    COption("",         "Generalize gas accounting.\n"),
./other_backup/esc_key/options.cpp:    COption("-option1", "option one"),
./other_backup/esc_key/options.cpp:    COption("-thing",   "option two"),
./other_backup/esc_key/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/largestInput/options.cpp:    COption("-option1", "option one"),
./other_backup/largestInput/options.cpp:    COption("-thing",   "option two"),
./other_backup/largestInput/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/addrs_loaddata/options.cpp:    COption("-option1", "option one"),
./other_backup/addrs_loaddata/options.cpp:    COption("-thing",   "option two"),
./other_backup/addrs_loaddata/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/acctScrape_old/options.cpp:    COption("-maxBlocks:<val>",  "scan at most --maxBlocks blocks ('all' implies scan to end of chain)"),
./other_backup/acctScrape_old/options.cpp:    COption("-logLevel:<val>",   "specify the log level (default 1)"),
./other_backup/acctScrape_old/options.cpp:    COption("@u seBlooms",        "search for transactions using bloom filters instead of address index"),
./other_backup/acctScrape_old/options.cpp:    COption("@noBloom(s)",       "do not use adaptive enhanced blooms (much faster if you use them)"),
./other_backup/acctScrape_old/options.cpp:    COption("@noBloc(k)s",       "do not use binary block cache (much faster if you use them)"),
./other_backup/acctScrape_old/options.cpp:    COption("@for_addr:<val>",   "force a scrape on the given account"),
./other_backup/acctScrape_old/options.cpp:    COption("@new_version",      "use the new version of index query"),
./other_backup/acctScrape_old/options.cpp:    COption("",                  "Index transactions for a given Ethereum address (or series of addresses).\n"),
./other_backup/everyEvent/options.cpp:    COption("-option1", "option one"),
./other_backup/everyEvent/options.cpp:    COption("-thing",   "option two"),
./other_backup/everyEvent/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/fixFinal/options.cpp:    COption("-option1", "option one"),
./other_backup/fixFinal/options.cpp:    COption("-thing",   "option two"),
./other_backup/fixFinal/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/addrs_extraction_2/options.cpp:    COption("", "Move address appearances into sorted 50 MB files.\n"),
./other_backup/ens_usage/options.cpp:    COption("-option1", "option one"),
./other_backup/ens_usage/options.cpp:    COption("-thing",   "option two"),
./other_backup/ens_usage/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/fixBlocks/options.cpp:    COption("", "Retreive blocks from the node and, if different, than on disc, re-write the block and finalize.\n"),
./other_backup/bloomScan/options.cpp:    COption("~source",      "source for the data (either 'local' or 'binary')"),
./other_backup/bloomScan/options.cpp:    COption("~begin",       "block to start with"),
./other_backup/bloomScan/options.cpp:    COption("~end",         "block to end on"),
./other_backup/bloomScan/options.cpp:    COption("~!skip",       "optional skip step (default 100)"),
./other_backup/bloomScan/options.cpp:    COption("-mode:<mode>", "if not present, display in 'short' mode, otherwise 'full' mode"),
./other_backup/bloomScan/options.cpp:    COption("-data",        "show results as data instead of displaying bloom filters"),
./other_backup/bloomScan/options.cpp:    COption("",             "Scans blocks looking for saturated bloomFilters.\n"),
./other_backup/finBlock/options.cpp:    COption("~block_list",  "a space-separated list of one or more blocks to process"),
./other_backup/finBlock/options.cpp:    COption("-check",       "check that all block marked as final, have not changes since being stored"),
./other_backup/finBlock/options.cpp:    COption("-clear",       "clear the finalize flag on all blocks in range"),
./other_backup/finBlock/options.cpp:    COption("-refresh",     "--check, and for those blocks found incorrect or not fi nalized, refresh"),
./other_backup/finBlock/options.cpp:    COption("",             "This is what the program does.\n"),
./other_backup/tokenCounter/options.cpp:    COption("-option1", "option one"),
./other_backup/tokenCounter/options.cpp:    COption("-thing",   "option two"),
./other_backup/tokenCounter/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/configs/options.cpp:    COption("-option1", "option one"),
./other_backup/configs/options.cpp:    COption("-thing",   "option two"),
./other_backup/configs/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/ipfs_helper/options.cpp:    COption("~file_list", "the list of files to store or retrieve from ipfs"),
./other_backup/ipfs_helper/options.cpp:    COption("-retrieve",  "retrieve a file from ipfs (hash or filename previously stored)"),
./other_backup/ipfs_helper/options.cpp:    COption("-store",     "store a file to ipfs"),
./other_backup/ipfs_helper/options.cpp:    COption("-h(i)story", "show the history of ipfs commands"),
./other_backup/ipfs_helper/options.cpp:    COption("",           "Play around with ipfs.\n"),
./other_backup/format/options.cpp:    COption("-option1", "option one"),
./other_backup/format/options.cpp:    COption("-thing",   "option two"),
./other_backup/format/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/web3scan/options.cpp:    COption("-firstBlock:<num>", "the first block to visit (block zero by default)"),
./other_backup/web3scan/options.cpp:    COption("-lastBlock:<num>",  "the last block to visit (to end of chain by default)"),
./other_backup/web3scan/options.cpp:    COption("-report",           "report on the statistics without updating"),
./other_backup/web3scan/options.cpp:    COption("",                  "Scan the mi niBlock database for trace counts.\n"),
./other_backup/creations/options.cpp:    COption("-check",     "verify that all (and only) addresses on the list have code" ),
./other_backup/creations/options.cpp:    COption("-list",      "list all contract addresses" ),
./other_backup/creations/options.cpp:    COption("-refreshen", "remove the contract address list and re-create it" ),
./other_backup/creations/options.cpp:    COption("-freshen",   "starting from the most recently visited block, append any new contracts to the list" ),
./other_backup/creations/options.cpp:    COption("",           "Builds a list of all contract addresses, alternatively, displays the same.\n"),
./other_backup/forMax_contracts/options.cpp:    COption("-option1", "option one"),
./other_backup/forMax_contracts/options.cpp:    COption("-thing",   "option two"),
./other_backup/forMax_contracts/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/tracingNeed/options.cpp:    COption("",         "Check to see which transactions need to be traced.\n"),
./other_backup/random/options.cpp:    COption("-option1", "option one"),
./other_backup/random/options.cpp:    COption("-thing",   "option two"),
./other_backup/random/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/bitsTwiddled/options.cpp:    COption("-option1", "option one"),
./other_backup/bitsTwiddled/options.cpp:    COption("-thing",   "option two"),
./other_backup/bitsTwiddled/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/contCounter/options.cpp:    COption("-option1", "option one"),
./other_backup/contCounter/options.cpp:    COption("-thing",   "option two"),
./other_backup/contCounter/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/database_tests/database/options.cpp:    COption("-option1", "option one"),
./other_backup/database_tests/database/options.cpp:    COption("-thing",   "option two"),
./other_backup/database_tests/database/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/database_tests/mysql/options.cpp:    COption("-option1", "option one"),
./other_backup/database_tests/mysql/options.cpp:    COption("-thing",   "option two"),
./other_backup/database_tests/mysql/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/database_tests/db/options.cpp:	COption("-option1",	"option one" ),
./other_backup/database_tests/db/options.cpp:	COption("-thing",	"option two" ),
./other_backup/database_tests/db/options.cpp:	COption("",		    "This is what the program does.\n" ),
./other_backup/database_tests/sql/options.cpp:    COption("-option1", "option one"),
./other_backup/database_tests/sql/options.cpp:    COption("-thing",   "option two"),
./other_backup/database_tests/sql/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/miniBlkTst/options.cpp:    COption("-option1", "option one"),
./other_backup/miniBlkTst/options.cpp:    COption("-thing",   "option two"),
./other_backup/miniBlkTst/options.cpp:    COption("",         "This is what the program does.\n"),
./other_backup/acctIndex/options.cpp:    COption("~mode",      "either 'list' or 'freshen'"),
./other_backup/acctIndex/options.cpp:    COption("-list",      "list all accounts in the account database (list mode)"),
./other_backup/acctIndex/options.cpp:    COption("-freshen",   "starting with the last block visited, update the account tree (freshen mode)"),
./other_backup/acctIndex/options.cpp:    COption("-refreshen", "remove the existing account tree and re-create it from scratch with freshen mode"),
./other_backup/acctIndex/options.cpp:    COption("",           "Build a database of accounts with arbirtrary data attached.\n"),
./other_backup/openmp/options.cpp:    COption("-option1", "option one"),
./other_backup/openmp/options.cpp:    COption("-thing",   "option two"),
./other_backup/openmp/options.cpp:    COption("",         "This is what the program does.\n"),
./libs/test-libs/acctlib/acctTree/options.cpp:    COption("-all",            "process all transactions from start of chain to latest block"),
./libs/test-libs/acctlib/acctTree/options.cpp:    COption("-start:<uint>",   "the first block to process"),
./libs/test-libs/acctlib/acctTree/options.cpp:    COption("-end:<uint>",     "the last block (less one) to process"),
./libs/test-libs/acctlib/acctTree/options.cpp:    COption("-nblocks:<uint>", "the number of blocks to visit (ignored for -a)"),
./libs/test-libs/acctlib/acctTree/options.cpp:    COption("",                "Build an account tree listing first transaction, latest transaction, and node balance for each account.\n"),
./libs/test-libs/utillib/curlTest/options.cpp:    COption("",             "Simple test program.\n"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("~testNum",         "the number of the test to run"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("~!optionalMode",   "an optional mode with ~! start"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("-bool:<bool>",     "enter a boolean value (either '0', '1', 'false', or 'true')"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("-int:<int>",       "enter any numeric value"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("-uint:<uint>",     "enter any numeric value greater than or equal to zero"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("-string:<string>", "enter any value"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("-range:<range>",   "enter a range of numeric values"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("-list:<list>",     "enter a list of value separated by commas (no spaces or quoted)"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("@hid(d)enOption",  "a hidden option with an alternative hot key"),
./libs/test-libs/utillib/cmdLineTest/options.cpp:    COption("",                 "Tests various command line behavior.\n"),
./libs/test-libs/utillib/arrayTest/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/utillib/arrayTest/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/utillib/timeTest/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/utillib/timeTest/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/utillib/jsonTest/options.cpp:    COption("~file(s)", "One or more files to parse"),
./libs/test-libs/utillib/jsonTest/options.cpp:    COption("",         "Test the json parsing facility in QBlocks.\n"),
./libs/test-libs/utillib/apiTest/options.cpp:    COption("",        "Test harness for QBlocks.\n"),
./libs/test-libs/utillib/tomlTest/options.cpp:    COption("~filename",    "toml filename to test"),
./libs/test-libs/utillib/tomlTest/options.cpp:    COption("",             "Simple test program for toml files.\n"),
./libs/test-libs/utillib/typesTest/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/utillib/typesTest/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/utillib/bigIntTest/options.cpp:    COption("",             "Simple test program.\n"),
./libs/test-libs/utillib/colorTest/options.cpp:    COption("",             "Simple test program.\n"),
./libs/test-libs/utillib/stringTest/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/utillib/stringTest/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/utillib/sizeof/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/utillib/sizeof/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/utillib/parsingTest/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/utillib/parsingTest/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/utillib/convert/options.cpp:    COption("~mode", "a number between 0 and 4 inclusive"),
./libs/test-libs/utillib/convert/options.cpp:    COption("",      "Test all the ridiculous conversions from whatever2Whatever.\n"),
./libs/test-libs/etherlib/sha3/options.cpp:    COption("",  "Testing code for the sha3 functionality of etherlib.\n"),
./libs/test-libs/etherlib/decode_abi/options.cpp:    COption("",           "Test abi decoding.\n"),
./libs/test-libs/etherlib/serialize/options.cpp:    COption("-testNum:[1|2]", "which test to run (either 1 and 2)"),
./libs/test-libs/etherlib/serialize/options.cpp:    COption("",               "This program tests floating point printing and conversions.\n"),
./libs/test-libs/etherlib/dataUpgrade/options.cpp:    COption("~mode:[0-5]", "either a number between 0 and 5, a C++ QBlocks class name, the word 'upgradeTest'"),
./libs/test-libs/etherlib/dataUpgrade/options.cpp:    COption("",            "Test upgrading binary data to new format.\n"),
./libs/test-libs/etherlib/displayStrs/options.cpp:    COption("~mode:[0-5]", "either a number between 0 and 5, a C++ QBlocks class name, the word 'upgradeTest'"),
./libs/test-libs/etherlib/displayStrs/options.cpp:    COption("",            "Test upgrading binary data to new format.\n"),
./libs/test-libs/etherlib/generalTest/options.cpp:    COption("",  "Testing code for the general functionality of etherlib.\n"),
./libs/test-libs/etherlib/printFloat/options.cpp:    COption("-testNum:[1|2]", "which test to run (either 1 and 2)"),
./libs/test-libs/etherlib/printFloat/options.cpp:    COption("",               "This program tests floating point printing and conversions.\n"),
./libs/test-libs/etherlib/abiTest/options.cpp:    COption("~mode",      "Mode of operation. One or more of 'encoding' or 'generation'.\n"),
./libs/test-libs/etherlib/abiTest/options.cpp:    COption("-sub:<num>", "sub mode"),
./libs/test-libs/etherlib/abiTest/options.cpp:    COption("",           "Simple program to illustrate how to encode function and event signatures.\n"),
./libs/test-libs/etherlib/forEvery/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/etherlib/forEvery/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./libs/test-libs/etherlib/blockTest/options.cpp:    COption("~mode", "a number between 0 and 2 inclusive"),
./libs/test-libs/etherlib/blockTest/options.cpp:    COption("",      "Test 'c' library strings against QBlocks strings.\n"),
./dev_tools/bytesUsed/options.cpp:    COption("",        "Counts the number of bytes stored on disk for quickBlock's binary database.\n"),
./dev_tools/makeClass/options.cpp:    COption("~className",          "name of C++ class(es) to process"),
./dev_tools/makeClass/options.cpp:    COption("-open",               "edit <className(s)> definition file in local folder"),
./dev_tools/makeClass/options.cpp:    COption("-run",                "run the class maker on associated <className(s)>"),
./dev_tools/makeClass/options.cpp:    COption("-js:<class>",         "export javaScript components for 'class'"),
./dev_tools/makeClass/options.cpp:    COption("-filter:<string>",    "process only files with :filter in their names"),
./dev_tools/makeClass/options.cpp:    COption("-list",               "list all definition files found in the local folder"),
./dev_tools/makeClass/options.cpp:    COption("-header",             "write headers files only"),
./dev_tools/makeClass/options.cpp:    COption("-sour(c)e",           "write source files only"),
./dev_tools/makeClass/options.cpp:    COption("-namespace:<string>", "surround the code with a --namespace:ns"),
./dev_tools/makeClass/options.cpp:    COption("-silent",             "on error (no classDefinition file) exit silently"),
./dev_tools/makeClass/options.cpp:    COption("-all",                "clear, edit, list, or run all class definitions found in the local folder"),
./dev_tools/makeClass/options.cpp:    COption("@edit",               "edit <className(s)> definition file in local folder"),
./dev_tools/makeClass/options.cpp:    COption("",                    "Creates C++ code based on definition file at ./classDefinition/<className>.\n"),
./apps/cacheMan/options.cpp:    COption("~filenames",        "path(s) of files to check, merge, fix or display (default=display)"),
./apps/cacheMan/options.cpp:    COption("-check",            "check for duplicates and other problems in the cache"),
./apps/cacheMan/options.cpp:    COption("-data",             "in 'list' mode, render results as data (i.e export mode)"),
./apps/cacheMan/options.cpp:    COption("-sort",             "sort the list of transactions and re-write (precludes other modes, other than --dedup)"),
./apps/cacheMan/options.cpp:    COption("-fix",              "remove duplicates from the cache (if any)"),
./apps/cacheMan/options.cpp:    COption("-list",             "list the contents of the cache (the default if no other option)"),
./apps/cacheMan/options.cpp:    COption("-cacheB(a)ls",      "cache per block account balances for each account"),
./apps/cacheMan/options.cpp:    COption("-balances",         "export account balances for each account"),
./apps/cacheMan/options.cpp:    COption("-import",           "import transactions if import.txt file exists in current folder"),
./apps/cacheMan/options.cpp:    COption("-remove",           "remove transactions if remove.txt file exists in current folder"),
./apps/cacheMan/options.cpp:    COption("-truncate:<num>",   "truncate the cache at block :n (keeps block 'n' and before, implies --fix)"),
./apps/cacheMan/options.cpp:    COption("-maxBloc(k):<num>", "for testing, max block to visit"),
./apps/cacheMan/options.cpp:    COption("-merge",            "merge two or more caches into a single cache"),
./apps/cacheMan/options.cpp:    COption("-fmt:<fmt>",         "export format (one of [json|txt|csv])"),
./apps/cacheMan/options.cpp:    COption("@s(k)ip",           "skip value for testing"),
./apps/cacheMan/options.cpp:    COption("@start:<num>",      "un-used hidden value - do not remove"),
./apps/cacheMan/options.cpp:    COption("",                  "Show the contents of an account cache and/or fix it by removing duplicate records.\n"),
./apps/blockScrape/options.cpp:    COption("-nBlocks:<num>",     "maximum number of blocks to process (defaults to 5000)"),
./apps/blockScrape/options.cpp:    COption("@nBlockProcs:<num>", "number of block channels for blaze"),
./apps/blockScrape/options.cpp:    COption("@nAddrProcs:<num>",  "number of address channels for blaze"),
./apps/blockScrape/options.cpp:    COption("",                   "Decentralized blockchain scraper and block cache.\n"),
./apps/acctExport/options.cpp:    COption("~address_list",      "one or more addresses (0x...) to export"),
./apps/acctExport/options.cpp:    COption("-fmt:<fmt>",         "export format (one of [json|txt|csv])"),
./apps/acctExport/options.cpp:    COption("-articulate",        "articulate transactions, traces, logs, and outputs"),
./apps/acctExport/options.cpp:    COption("-logs",              "export logs instead of transactions"),
./apps/acctExport/options.cpp:    COption("@blocks:<on/off>",   "write blocks to the binary cache ('off' by default)"),
./apps/acctExport/options.cpp:    COption("@txs:<on/off>",      "write transactions to the binary cache ('on' by default)"),
./apps/acctExport/options.cpp:    COption("@t(r)aces:<on/off>", "write traces to the binary cache ('off' by default)"),
./apps/acctExport/options.cpp:    COption("@ddos:<on/off>",     "skip over dDos transactions in export ('on' by default)"),
./apps/acctExport/options.cpp:    COption("@maxTraces:<num>",   "if --ddos:on, the number of traces defining a dDos (default = 250)"),
./apps/acctExport/options.cpp:    COption("@start:<num>",       "first block to export (inclusive)"),
./apps/acctExport/options.cpp:    COption("@end:<num>",         "last block to export (inclusive)"),
./apps/acctExport/options.cpp:    COption("",                   "Export full detail of transactions for one or more Ethereum addresses.\n"),
./apps/chifra/options.cpp:    COption("~command", "one of [ leech | scrape | daemon | list | export | balances | stats | ls | rm | accounts | config | slurp | quotes | data | blocks | trans | receipts | logs | traces ]"),
./apps/chifra/options.cpp:    COption("",         "Create a TrueBlocks monitor configuration.\n"),
./apps/acctScrape/options.cpp:    COption("-maxBlocks:<val>", "scan at most --maxBlocks blocks ('all' implies scan to end of chain)"),
./apps/acctScrape/options.cpp:    COption("@unripe",          "visit unripe (not yet staged or finalized) blocks"),
./apps/acctScrape/options.cpp:    COption("@noBlooms",        "turn off bloom filters for performance testing"),
./apps/acctScrape/options.cpp:    COption("@staging",         "produce results in the staging folder instead of production folder"),
./apps/acctScrape/options.cpp:    COption("@start:<num>",     "first block to check"),
./apps/acctScrape/options.cpp:    COption("",                 "Index transactions for a given Ethereum address (or series of addresses).\n"),
